"""
lumberjack.py
A plugin that will call a function whenever an agent checks in

INSTALLATION:
    cp lumberjack.py empire/plugins

USAGE (In empire):
    plugin lumberjack
"""

import requests
import functools
from lib.common.plugins import Plugin
from lib.common.plugins import Plugin
import lib.common.helpers as helpers


class Plugin(Plugin):
    description = "A plugin to feed session checkins to the pwnboard and Sawmill"

    def onLoad(self):
        """
        init variables at start
        """
        self.mainMenu = None
        self.pwnboard = "{{ server }}/generic"
        self.sawmill = None

    def register(self, mainMenu):
        """ any modifications to the mainMenu go here - e.g.
        registering functions to be run by user commands """
        mainMenu.__class__.do_lumberjack = self.do_lumberjack
        mainMenu.__class__.do_setpwnboard = self.do_setpwnboard
        self.mainMenu = mainMenu  # Save this object for later

        # Make the agent checkin call our agent checkin first
        mainMenu.agents.update_agent_lastseen_db = self.wrapper(
            mainMenu.agents.update_agent_lastseen_db,
            self.hook_agent_lastseen_db
        )
        if not self.pwnboard:
            self.activeBoard=False
            print("Warning: PwnBoard URL not set...")
            print("Use function `setpwnboard <URL>`")
        else:
            self.activeBoard=True

    def do_lumberjack(self, args):
        """Print the current configuration for lumberjack
        TODO: allow updates to the URLS
        """
        print(helpers.color("[*] Lumberjack plugin has been loaded!"))
        print(helpers.color("[*] \tPwnboard URL: {}".format(self.pwnboard)))

    def hook_agent_lastseen_db(self, sessionID):
        """Function hook for agents.update_..._db() that will let us know
        when agents check in"""
        if not self.activeBoard:
            return
        session_data = self.mainMenu.agents.get_agent_db(sessionID)  # Get the session info
        victim_ip = session_data['internal_ip'].split()[0]  # Ip of callback
        self.update_pwnboard([victim_ip], name="empire")

    def wrapper(self, func, func2):
        """
        wraps func with func2
        """
        @functools.wraps(func)
        def wrap(*args, **kwargs):
            func2(*args, **kwargs)
            return func(*args, **kwargs)
        return wrap

    def update_pwnboard(self, ips, name="python"):
        """
        Upstream callback IP to the pwnboard
        """
        host = self.pwnboard
        data = {'ips': ips, 'type': name}
        try:
            req = requests.post(host, json=data, timeout=3)
            return True
        except Exception as E:
            print(E)
            return False

    def do_setpwnboard(self, args):
        """
        Set the pwnboard URL using the first argument supplied
        """
        argArr = args.split(" ")
        def usage():
            print("USAGE: `setpwnboard <URL>`")
            return False
        if len(argArr) != 1:
            return usage()
        if argArr[0].endswith("help"):
            return usage()
        if not argArr[0].startswith("http://") and \
            not argArr[0].startswith("https://"):
            argArr[0] = "http://" + argArr[0]
        self.pwnboard=argArr[0]
        self.activeBoard = True
        return True
